generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id                    Int                    @id @default(autoincrement())
  login                 String                 @unique
  email                 String?                @unique
  passwordHash          String?
  createdAt             DateTime               @default(now()) @db.Timestamp(6)
  isEmailConfirmed      Boolean                @default(false)
  photoUrl              String?
  google                GoogleUser?
  offerheap             OfferheapUser?
  devices               Device[]
  github                GithubUser?
  emailConfirmationInfo UserEmailConfirmation?
  passwordRecoveryInfo  UserPasswordRecovery?

  @@unique([id, login])
  @@map("user")
}

model UserEmailConfirmation {
  confirmationCode String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expirationDate   DateTime @db.Timestamp(6)
  isConfirmed      Boolean  @default(false)
  userId           Int      @unique
  email            String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([confirmationCode], map: "user_email_confirmation_code_index")
  @@map("user_email_confirmation")
}

model UserPasswordRecovery {
  recoveryCode   String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expirationDate DateTime @db.Timestamp(6)
  isConfirmed    Boolean  @default(false)
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([recoveryCode], map: "user_password_recovery_code_index")
  @@map("user_password_recovery")
}

model GithubUser {
  id       Int    @id
  username String
  photoUrl String
  userId   Int    @unique
  email    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "github_user_id_index")
  @@map("github_user")
}

model GoogleUser {
  email    String
  photoUrl String?
  userId   Int     @unique
  id       String  @id
  username String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OfferheapUser {
  id       Int    @id
  username String
  photoUrl String
  userId   Int    @unique
  email    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ip         String
  deviceName String
  issuedAt   DateTime @db.Timestamp(6)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device")
}
